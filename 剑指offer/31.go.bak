/*
输入一个整形数组，数组中有正数 也有负数。
一个或者连续多个正数组成一个子数组。求所有子数组的最大和。

f(0) = 1
f(1) = max(f(0), max(a[1], a[1]+a[0])
f(2) = max(f(1),max(a[2],a[2]+a[1],a[2]+a[1]+a[0]))

方程已经写出来了。

======================================
上面的计算中还是有重复的。

是最大值这里重复了。
13 + 13 + 10
============运用动态规划的条件是什么========================



*/
package main

import "fmt"

func main() {
	fmt.Println(FindMax2([]int{1, -2, 3, 10, -4, 7, 2, -5}))
}

func FindMax(data []int) int {
	lastMax := data[0]
	cache := make([]int, len(data))
	max := data[0]

	for i := 1; i < len(data); i++ {
		cache[i] = data[i]
		//maxTmp 维持一个值就可以。
		//cache就不用了。
		//无论如何都要加。
		//加上之后再比较
		//也会优化成下面的精简版本。

		maxTmp := data[i]
		for j := i - 1; j >= 0; j-- {
			cache[j] += data[i]
			if cache[j] > maxTmp {
				maxTmp = cache[j]
			}
		}

		if maxTmp > lastMax {
			max = maxTmp
			lastMax = maxTmp
		}
	}
	return max
}

func FindMax2(data []int) int {
	max := data[0]
	continueMax := data[0]

	for i := 1; i < len(data); i++ {
		if continueMax < 0 {
			continueMax = data[i]
		} else {
			continueMax += data[i]
		}

		if continueMax > max {
			max = continueMax
		}
	}

	return max
}
