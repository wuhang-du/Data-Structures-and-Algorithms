/*
题目：在一个二维数组中，每一行都按照从左向右递增的顺序排列，
每一列都按照从上到下的递增的顺序排列。
请完成一个函数，输入这样的一个二维数组与一个整数，判断数组中是否含有该数字。

1 2 4 5
2 3 5 7
4 5 6 8
7 8 9 10

==========题目分析===========
已知二维数组：
数组有明确的性质： 即行递增。列递增。
预期：equal。

===========类型分析==========
a.有二维的场景。
b.场景中有隐含的，或者已知的性质,可以运用于目标函数。
类似于：本题是排序，目标是equal.


=======代码实现===============
笨办法：挨个遍历。
有用的办法：利用已知的排序性质。

*/

package main

import "fmt"

func main() {
	data := [][]int{{1, 2, 3}, {4, 5, 6}}
	row, col, finded := FindTarget(data, 4)
	fmt.Println(row, col, finded)

	row1, col1, finded1 := FindTarget2Version(data, 4)
	fmt.Println(row1, col1, finded1)
}

func FindTarget(data [][]int, target int) (int, int, int) {
	row := len(data)
	if row <= 0 {
		return -1, -1, 0
	}

	col := len(data[0])
	if col <= 0 {
		return -1, -1, 1
	}

	for rowtmp := 0; rowtmp < row; rowtmp++ {
		for coltmp := col - 1; coltmp >= 0; coltmp-- {
			fmt.Println(rowtmp, coltmp)
			if data[rowtmp][coltmp] < target {
				//这一行不用比了。
				break
			}

			if data[rowtmp][coltmp] > target {
				//这一列不用比了。
				col--
				continue
			}

			if data[rowtmp][coltmp] == target {
				return rowtmp, coltmp, 2
			}
		}
	}

	return -1, -1, 3
}

func FindTarget2Version(data [][]int, target int) (int, int, bool) {
	row := len(data)
	if row <= 0 {
		return -1, -1, false
	}

	col := len(data[0])
	if col <= 0 {
		return -1, -1, false
	}

	rowTmp := 0
	colTmp := col - 1

	for rowTmp < row && colTmp >= 0 {
		if data[rowTmp][colTmp] == target {
			return rowTmp, colTmp, true
		}

		if data[rowTmp][colTmp] > target {
			colTmp--
		} else {
			rowTmp++
		}

	}

	return 0, 0, false
}
