/*
输入一个字符串 打印这个字符串的全排列
ab
ba


每一轮选定一个字符。再递归。
注意还原。

当一个字符确定后，其他的问题就变成一个同等状态下的子问题。
--> 遍历的逻辑套上了递归。本身也是一个问题的组合。

这个栈存的是index.
直到每一层的index都遍历 字符串个数次。
栈的层数决定着是不是打印。

还有一个字符串本身的状态保护，这个比较麻烦。



===============================
求字符的所有组合
八皇后问题

八皇后问题：把排列全搞出来之后，再判断未免蛋疼。再排列的过程中就应该一遍添加，一边剪枝。这样效率更好。

类似这种摆数字的问题，可以先穷举遍历，再根据判定条件 看是不是满足。

==========================================
解决问题的思路：
画图，分解，举例子。


分解：分治法。归并排序。 
大问题划分为小问题。 如何划分？ 子问题如果还是同样的，本身递归的逻辑就出来。 
要么就是 横向的，划分为几个部分。

*/
package main

import "fmt"

func main() {
	Print([]byte("abc"), 0)
}

func Print(data []byte, index int) {
	if len(data) == index+1 {
		fmt.Println(string(data))
		return
	}

	length := len(data)
	for i := index; i < length; i++ {
		data[index], data[i] = data[i], data[index]
		Print(data, index+1)
		data[index], data[i] = data[i], data[index]
	}
}
